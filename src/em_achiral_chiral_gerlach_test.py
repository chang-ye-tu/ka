# -*- coding: utf-8 -*-

### code generated by code_generator.py on 2013-09-27 23:03:21.874833 ###

from op import *

c_il, c_ir, c_el, c_er = 1. + 1.j, 3., 1., 2.
omega = 1.

eps_i, mu_i, beta_i = 1.4, 1.2, 0.1
eps_e, mu_e, beta_e = 1., 1., 0.
c1, m1, c2, m2 = 1., 1., 2., 2.
xi = sqrt(eps_i*mu_e/(eps_e*mu_i))
xi_p = 1/2 * (xi + 1/xi)
xi_m = 1/2 * (xi - 1/xi)

k_i = sqrt(omega**2 * eps_i * mu_i)
k_e = sqrt(omega**2 * eps_e * mu_e)
gamma_ir = k_i / (1 + k_i * beta_i) 
gamma_il = k_i / (1 - k_i * beta_i)
gamma_er = k_e / (1 + k_e * beta_e)
gamma_el = k_e / (1 - k_e * beta_e)
delta = sqrt(mu_i/mu_e)
rho = sqrt(eps_i/eps_e)

n = 16       # sections 
d = [1, 0]   # observed direction    

def R(t):
    s = 0.
    for l in arange(1, n):
        s += 1. / l * cos(l * t * pi/n)
    return -2 * pi/n * s - pi/(n**2) * ((-1)**t)

Q_er_inf_0 = c_er * sqrt(2/(pi*gamma_er)) * exp(-1j*pi/4)
Q_el_inf_0 = c_el * sqrt(2/(pi*gamma_el)) * exp(-1j*pi/4) 
Q_el_inf, Q_er_inf = 0., 0.

u = zeros((8*n,), dtype=complex)
for l in arange(2*n):
    norm = x(l*pi/n)
    d_nu = (x2p(l*pi/n) * x1(l*pi/n) - x1p(l*pi/n) * x2(l*pi/n)) / (xp(l*pi/n) * norm)
    u[4*l + 0] = 2 * c_el * d_nu * gamma_el * gamma_il * hankel1(1, gamma_el * norm) / k_e - 2 * c_il * d_nu * gamma_il * j1(gamma_il * norm)
    u[4*l + 1] = 2 * c_er * d_nu * gamma_er * gamma_ir * hankel1(1, gamma_er * norm) / k_e - 2 * c_ir * d_nu * gamma_ir * j1(gamma_ir * norm)
    u[4*l + 2] =  - 2 * c_el * hankel1(0, gamma_el * norm) * xi_p - 2 * c_er * hankel1(0, gamma_er * norm) * xi_m + 2 * c_il * j0(gamma_il * norm)
    u[4*l + 3] =  - 2 * c_er * hankel1(0, gamma_er * norm) * xi_p - 2 * c_el * hankel1(0, gamma_el * norm) * xi_m + 2 * c_ir * j0(gamma_ir * norm)

E = zeros((8*n, 8*n), dtype=complex)
for l in arange(2*n):
    E[4*l + 0, 4*l + 0] = (gamma_el * m1 + c1 * gamma_il) * 1 / gamma_el
    E[4*l + 0, 4*l + 1] = 0
    E[4*l + 0, 4*l + 2] = 0
    E[4*l + 0, 4*l + 3] = 0
    E[4*l + 1, 4*l + 0] = 0
    E[4*l + 1, 4*l + 1] = (gamma_el * m2 + c2 * gamma_ir) * 1 / gamma_el
    E[4*l + 1, 4*l + 2] = 0
    E[4*l + 1, 4*l + 3] = 0
    E[4*l + 2, 4*l + 0] = 0
    E[4*l + 2, 4*l + 1] = 0
    E[4*l + 2, 4*l + 2] =  - (gamma_el * xi_p + gamma_il) * 1 / gamma_el
    E[4*l + 2, 4*l + 3] =  - xi_m * 1
    E[4*l + 3, 4*l + 0] = 0
    E[4*l + 3, 4*l + 1] = 0
    E[4*l + 3, 4*l + 2] =  - xi_m * 1
    E[4*l + 3, 4*l + 3] =  - (gamma_el * xi_p + gamma_ir) * 1 / gamma_el

K = zeros((8*n, 8*n), dtype=complex)
for l in arange(2*n):
    for m in arange(2*n):
        K[4*l + 0, 4*m + 0] = (R(l - m) * Ls1(pi*l/n, pi*m/n, gamma_il) + pi/n * Ls2(pi*l/n, pi*m/n, gamma_il)) * m1 - c1 * gamma_il * (R(l - m) * Ls1(pi*l/n, pi*m/n, gamma_el) + pi/n * Ls2(pi*l/n, pi*m/n, gamma_el)) / gamma_el
        K[4*l + 0, 4*m + 1] = 0
        K[4*l + 0, 4*m + 2] = gamma_il * (R(l - m) * N1(pi*l/n, pi*m/n, gamma_il) + pi/n * N2(pi*l/n, pi*m/n, gamma_il)) / gamma_el - gamma_il * (R(l - m) * N1(pi*l/n, pi*m/n, gamma_el) + pi/n * N2(pi*l/n, pi*m/n, gamma_el)) / gamma_el
        K[4*l + 0, 4*m + 3] = 0
        K[4*l + 1, 4*m + 0] = 0
        K[4*l + 1, 4*m + 1] = (R(l - m) * Ls1(pi*l/n, pi*m/n, gamma_ir) + pi/n * Ls2(pi*l/n, pi*m/n, gamma_ir)) * m2 - c2 * gamma_ir * (R(l - m) * Ls1(pi*l/n, pi*m/n, gamma_er) + pi/n * Ls2(pi*l/n, pi*m/n, gamma_er)) / gamma_el
        K[4*l + 1, 4*m + 2] = 0
        K[4*l + 1, 4*m + 3] = gamma_ir * (R(l - m) * N1(pi*l/n, pi*m/n, gamma_ir) + pi/n * N2(pi*l/n, pi*m/n, gamma_ir)) / gamma_el - gamma_ir * (R(l - m) * N1(pi*l/n, pi*m/n, gamma_er) + pi/n * N2(pi*l/n, pi*m/n, gamma_er)) / gamma_el
        K[4*l + 2, 4*m + 0] = m1 * (R(l - m) * M1(pi*l/n, pi*m/n, gamma_il) + pi/n * M2(pi*l/n, pi*m/n, gamma_il)) - c1 * (R(l - m) * M1(pi*l/n, pi*m/n, gamma_el) + pi/n * M2(pi*l/n, pi*m/n, gamma_el)) * xi_p
        K[4*l + 2, 4*m + 1] =  - c2 * (R(l - m) * M1(pi*l/n, pi*m/n, gamma_er) + pi/n * M2(pi*l/n, pi*m/n, gamma_er)) * xi_m
        K[4*l + 2, 4*m + 2] = gamma_il * (R(l - m) * L1(pi*l/n, pi*m/n, gamma_il) + pi/n * L2(pi*l/n, pi*m/n, gamma_il)) / gamma_el - (R(l - m) * L1(pi*l/n, pi*m/n, gamma_el) + pi/n * L2(pi*l/n, pi*m/n, gamma_el)) * xi_p
        K[4*l + 2, 4*m + 3] =  - (R(l - m) * L1(pi*l/n, pi*m/n, gamma_er) + pi/n * L2(pi*l/n, pi*m/n, gamma_er)) * xi_m
        K[4*l + 3, 4*m + 0] =  - c1 * (R(l - m) * M1(pi*l/n, pi*m/n, gamma_el) + pi/n * M2(pi*l/n, pi*m/n, gamma_el)) * xi_m
        K[4*l + 3, 4*m + 1] = m2 * (R(l - m) * M1(pi*l/n, pi*m/n, gamma_ir) + pi/n * M2(pi*l/n, pi*m/n, gamma_ir)) - c2 * (R(l - m) * M1(pi*l/n, pi*m/n, gamma_er) + pi/n * M2(pi*l/n, pi*m/n, gamma_er)) * xi_p
        K[4*l + 3, 4*m + 2] =  - (R(l - m) * L1(pi*l/n, pi*m/n, gamma_el) + pi/n * L2(pi*l/n, pi*m/n, gamma_el)) * xi_m
        K[4*l + 3, 4*m + 3] = gamma_ir * (R(l - m) * L1(pi*l/n, pi*m/n, gamma_ir) + pi/n * L2(pi*l/n, pi*m/n, gamma_ir)) / gamma_el - (R(l - m) * L1(pi*l/n, pi*m/n, gamma_er) + pi/n * L2(pi*l/n, pi*m/n, gamma_er)) * xi_p

z = linalg.solve(E + K, u)

for l in arange(2*n):
    Q_er_inf += (c2 * z[4*l+1] * (1.j * xp(l*pi/n)) + (gamma_er * (d[0] * x2p(l*pi/n) - d[1] * x1p(l*pi/n))) * z[4*l+3]) * exp(-1.j * gamma_er * (d[0] * x1(l*pi/n) + d[1] * x2(l*pi/n)))
    Q_el_inf += (c1 * z[4*l] * (1.j * xp(l*pi/n)) + (gamma_el * (d[0] * x2p(l*pi/n) - d[1] * x1p(l*pi/n))) * z[4*l+2]) * exp(-1.j * gamma_el * (d[0] * x1(l*pi/n) + d[1] * x2(l*pi/n)))
Q_er_inf = exp(-1j*pi/4) / sqrt(8*pi*gamma_er) * pi/n * Q_er_inf
Q_el_inf = exp(-1j*pi/4) / sqrt(8*pi*gamma_el) * pi/n * Q_el_inf

print Q_el_inf, Q_el_inf_0, Q_er_inf, Q_er_inf_0
