/* declarations and utilities */

kill(all)$

operators: [K_g_il, K_g_ir, K_g_el, K_g_er, Ks_g_il, Ks_g_ir, Ks_g_el, Ks_g_er, S_g_il, S_g_ir, S_g_el, S_g_er, T_g_il, T_g_ir, T_g_el, T_g_er, I, Ks_e, Ks_i, K_e, K_i,T_i, T_e, S_i, S_e]$

gforce(s) := block([r, r1, r2, tmp],
  tmp: s,
  for r in [[1/gamma_er,  (beta_e * k_e + 1)/k_e], 
            [-1/gamma_el, (beta_e * k_e - 1)/k_e],
            [1/gamma_ir,  (beta_i * k_i + 1)/k_i],
            [-1/gamma_il, (beta_i * k_i - 1)/k_i]] do
    ([r1, r2]: r, 
     if not freeof(num(r2), tmp) then tmp: ratsubst(r1, r2, tmp)),
  tmp
)$

finalc(cc) := block([tmp, cclist, r, r1, r2], 
  cclist: 0,
  for o in operators do (
    if o = I then tmp: coeff(cc, I) else tmp: factor(coeff(cc, o)),
    cclist: gforce(tmp) * o + cclist),
  cclist
)$

get_e(cc) := bothcoef(finalc(cc), I)[1] * I$
get_a(cc) := bothcoef(finalc(cc), I)[2]$

repo: "/home/cytu/usr/work/research/ka/src_new/data/"$

/* chiral-chiral */

/* ansatz */
Q_il: K_g_il_i * (z[1,1] * psi[1] + z[1,2] * psi[2]) + S_g_il_i * (z[1,3] * psi[3] + z[1,4] * psi[4])$
Q_ir: K_g_ir_i * (z[2,1] * psi[1] + z[2,2] * psi[2]) + S_g_ir_i * (z[2,3] * psi[3] + z[2,4] * psi[4])$
Q_el: K_g_el_e * (z[3,1] * psi[1] + z[3,2] * psi[2]) + S_g_el_e * (z[3,3] * psi[3] + z[3,4] * psi[4])$
Q_er: K_g_er_e * (z[4,1] * psi[1] + z[4,2] * psi[2]) + S_g_er_e * (z[4,3] * psi[3] + z[4,4] * psi[4])$

/* trace relations */
Q_il_nu: subst([S_g_il_i=Ks_g_il + I, K_g_il_i=T_g_il], Q_il)$
Q_ir_nu: subst([S_g_ir_i=Ks_g_ir + I, K_g_ir_i=T_g_ir], Q_ir)$
Q_el_nu: subst([S_g_el_e=Ks_g_el - I, K_g_el_e=T_g_el], Q_el)$
Q_er_nu: subst([S_g_er_e=Ks_g_er - I, K_g_er_e=T_g_er], Q_er)$
Q_il_n: subst([K_g_il_i=K_g_il - I, S_g_il_i=S_g_il], Q_il)$
Q_ir_n: subst([K_g_ir_i=K_g_ir - I, S_g_ir_i=S_g_ir], Q_ir)$
Q_el_n: subst([K_g_el_e=K_g_el + I, S_g_el_e=S_g_el], Q_el)$
Q_er_n: subst([K_g_er_e=K_g_er + I, S_g_er_e=S_g_er], Q_er)$

/* transmission boundary conditions in Q_ij */
eq[1]: v0 = delta / 2 * (Q_ir_n + Q_il_n) - 1 / 2 * (Q_er_n + Q_el_n)$
eq[2]: w0 = %i * rho / 2 * (Q_ir_n - Q_il_n) - %i / 2 * (Q_er_n - Q_el_n)$ 
eq[3]: v1 = delta / 2 * (1 / gamma_ir * Q_ir_nu - 1 / gamma_il * Q_il_nu) - 1 / 2 * (1 / gamma_er * Q_er_nu - 1 / gamma_el * Q_el_nu)$
eq[4]: w1 = %i * rho / 2 * (1 / gamma_ir * Q_ir_nu + 1 / gamma_il * Q_il_nu) - %i / 2 * (1 / gamma_er * Q_er_nu + 1 / gamma_el * Q_el_nu)$

/* generate u for testing */
Q_ir_n0: c_ir * J0_ir$
Q_il_n0: c_il * J0_il$
Q_er_n0: c_er * H0_er$
Q_el_n0: c_el * H0_el$
Q_ir_nu0: -c_ir * gamma_ir * J1_ir * d_nu$
Q_il_nu0: -c_il * gamma_il * J1_il * d_nu$
Q_er_nu0: -c_er * gamma_er * H1_er * d_nu$
Q_el_nu0: -c_el * gamma_el * H1_el * d_nu$

u[1]: 2 * (delta / 2 * (Q_ir_n0 + Q_il_n0) - 1 / 2 * (Q_er_n0 + Q_el_n0))$
u[2]: 2 * (%i * rho / 2 * (Q_ir_n0 - Q_il_n0) - %i / 2 * (Q_er_n0 - Q_el_n0))$ 
u[3]: 2 * (delta / 2 * (1 / gamma_ir * Q_ir_nu0 - 1 / gamma_il * Q_il_nu0) - 1 / 2 * (1 / gamma_er * Q_er_nu0 - 1 / gamma_el * Q_el_nu0))$
u[4]: 2 * (%i * rho / 2 * (1 / gamma_ir * Q_ir_nu0 + 1 / gamma_il * Q_il_nu0) - %i / 2 * (1 / gamma_er * Q_er_nu0 + 1 / gamma_el * Q_el_nu0))$

for i:1 thru 4 do
  for j:1 thru 4 do
    c[i, j]: coeff(expand(rhs(eq[i])), (psi[j]))$

apply(stringout, append([sconcat(repo, "all_rawc_chiral_chiral")], flatten(makelist(makelist(c[i, j], j, 4), i, 4))))$

/* sum of the coefficients of hypersingular operators in each c[i, j] should = 0 */
for i:1 thru 4 do
  for j:1 thru 4 do
    e[i, j]: coeff(c[i, j], T_g_ir) + coeff(c[i, j], T_g_il) + coeff(c[i, j], T_g_er) + coeff(c[i, j], T_g_el) = 0$

sl: flatten(solve(flatten(makelist(makelist(e[i, j], j, 4), i, 4)), 
      flatten(makelist(makelist(z[i, j], j, 4), i, 4))))$

/* parameters selection */
ss: factor(subst([%r4=gamma_il*(delta-rho), %r11=1, %r3=0, %r12=gamma_ir*(rho+delta), %r10=0, %r9=1, %r8=1, %r7=0, %r6=1, %r5=0, %r2=0, %r1=1], sl))$

for i:1 thru 4 do
  for j:1 thru 4 do
    c[i, j]: subst(ss, c[i, j])$

/* output for further processing */
stringout(sconcat(repo, "all_q_chiral_chiral"), subst(ss, Q_er), subst(ss, Q_el))$ 

apply(stringout, append([sconcat(repo, "all_c_chiral_chiral")],
      flatten(makelist(makelist(c[i, j], j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_e_chiral_chiral")],
      flatten(makelist(makelist(get_e(c[i, j]), j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_a_chiral_chiral")],
      flatten(makelist(makelist(get_a(c[i, j]), j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_eq_chiral_chiral")], flatten(makelist(makelist(e[i, j], j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_u_chiral_chiral")], makelist(u[i], i, 4)))$

apply(stringout, append([sconcat(repo, "all_bv_chiral_chiral")], makelist(eq[i], i, 4)))$

det: determinant(subst([I=1], 
     apply(matrix, makelist(makelist(get_e(c[i, j]), j, 4), i, 4))))$

stringout(sconcat(repo, "all_det_chiral_chiral"), factor(det))$

/* achiral-chiral */

Q_il: K_g_il_i * (z[1,1] * psi[1] + z[1,2] * psi[2]) + S_g_il_i * (z[1,3] * psi[3] + z[1,4] * psi[4])$
Q_ir: K_g_ir_i * (z[2,1] * psi[1] + z[2,2] * psi[2]) + S_g_ir_i * (z[2,3] * psi[3] + z[2,4] * psi[4])$
Q_el: K_e_e * (z[3,1] * psi[1] + z[3,2] * psi[2]) + S_e_e * (z[3,3] * psi[3] + z[3,4] * psi[4])$
Q_er: K_e_e * (z[4,1] * psi[1] + z[4,2] * psi[2]) + S_e_e * (z[4,3] * psi[3] + z[4,4] * psi[4])$
beta_e: 0$
gamma_er: k_e$
gamma_el: k_e$

Q_il_nu: subst([S_g_il_i=Ks_g_il + I, K_g_il_i=T_g_il], Q_il)$
Q_ir_nu: subst([S_g_ir_i=Ks_g_ir + I, K_g_ir_i=T_g_ir], Q_ir)$
Q_el_nu: subst([S_e_e=Ks_e - I, K_e_e=T_e], Q_el)$
Q_er_nu: subst([S_e_e=Ks_e - I, K_e_e=T_e], Q_er)$
Q_il_n: subst([K_g_il_i=K_g_il - I, S_g_il_i=S_g_il], Q_il)$
Q_ir_n: subst([K_g_ir_i=K_g_ir - I, S_g_ir_i=S_g_ir], Q_ir)$
Q_el_n: subst([K_e_e=K_e + I, S_e_e=S_e], Q_el)$
Q_er_n: subst([K_e_e=K_e + I, S_e_e=S_e], Q_er)$

/* v = \nu\times E_in, v1 = v[3], v0 = v[1:2] 
   w = \nu\times H_in, w1 = w[3], w0 = w[1:2] */

/*
E3_i_nu: 1/2 * (Q_ir_nu + Q_il_nu)$ 
H3_i_nu: %i / 2 * (Q_ir_nu - Q_il_nu)$
E3_e_nu: 1/2 * (Q_er_nu + Q_el_nu)$
H3_e_nu: %i / 2 * (Q_er_nu - Q_el_nu)$
E3_i_n: 1/2 * (Q_ir_n + Q_il_n)$ 
H3_i_n: %i / 2 * (Q_ir_n - Q_il_n)$
E3_e_n: 1/ 2 * (Q_er_n + Q_el_n)$
H3_e_n: %i / 2 * (Q_er_n - Q_el_n)$

eq[1]: v0 = delta * E3_i_n - E3_e_n$
eq[2]: w0 = rho * H3_i_n - H3_e_n$
eq[3]: v1 = delta * (beta_i * E3_i_nu - %i / k_i * H3_i_nu) - (beta_e * E3_e_nu - %i / k_e * H3_e_nu)$ 
eq[4]: w1 = rho * (beta_i * H3_i_nu + %i / k_i * E3_i_nu) - (beta_e * H3_e_nu + %i / k_e * E3_e_nu)$ 
*/

eq[1]: v0 = delta / 2 * (Q_ir_n + Q_il_n) - 1 / 2 * (Q_er_n + Q_el_n)$
eq[2]: w0 = %i * rho / 2 * (Q_ir_n - Q_il_n) - %i / 2 * (Q_er_n - Q_el_n)$ 
eq[3]: v1 = delta / 2 * (1 / gamma_ir * Q_ir_nu - 1 / gamma_il * Q_il_nu) - 1 / 2 * (1 / gamma_er * Q_er_nu - 1 / gamma_el * Q_el_nu)$
eq[4]: w1 = %i * rho / 2 * (1 / gamma_ir * Q_ir_nu + 1 / gamma_il * Q_il_nu) - %i / 2 * (1 / gamma_er * Q_er_nu + 1 / gamma_el * Q_el_nu)$

Q_ir_n0: c_ir * J0_ir$
Q_il_n0: c_il * J0_il$
Q_er_n0: c_er * H0_e$
Q_el_n0: c_el * H0_e$
Q_ir_nu0: -c_ir * gamma_ir * J1_ir * d_nu$
Q_il_nu0: -c_il * gamma_il * J1_il * d_nu$
Q_er_nu0: -c_er * k_e * H1_e * d_nu$
Q_el_nu0: -c_el * k_e * H1_e * d_nu$

/*
E3_i_nu0: 1/2 * (Q_ir_nu0 + Q_il_nu0)$ 
E3_e_nu0: 1/2 * (Q_er_nu0 + Q_el_nu0)$
H3_i_nu0: %i / 2 * (Q_ir_nu0 - Q_il_nu0)$
H3_e_nu0: %i / 2 * (Q_er_nu0 - Q_el_nu0)$
E3_i_n0: 1/2 * (Q_ir_n0 + Q_il_n0)$ 
E3_e_n0: 1/2 * (Q_er_n0 + Q_el_n0)$
H3_i_n0: %i / 2 * (Q_ir_n0 - Q_il_n0)$
H3_e_n0: %i / 2 * (Q_er_n0 - Q_el_n0)$

u[1]: 2*(delta * E3_i_n0 - E3_e_n0)$
u[2]: 2*(rho * H3_i_n0 - H3_e_n0)$
u[3]: 2*(delta * (beta_i * E3_i_nu0 - %i / k_i * H3_i_nu0) - (beta_e * E3_e_nu0 - %i / k_e * H3_e_nu0))$ 
u[4]: 2*(rho * (beta_i * H3_i_nu0 + %i / k_i * E3_i_nu0) - (beta_e * H3_e_nu0 + %i / k_e * E3_e_nu0))$ 
*/

u[1]: 2 * (delta / 2 * (Q_ir_n0 + Q_il_n0) - 1 / 2 * (Q_er_n0 + Q_el_n0))$
u[2]: 2 * (%i * rho / 2 * (Q_ir_n0 - Q_il_n0) - %i / 2 * (Q_er_n0 - Q_el_n0))$ 
u[3]: 2 * (delta / 2 * (1 / gamma_ir * Q_ir_nu0 - 1 / gamma_il * Q_il_nu0) - 1 / 2 * (1 / gamma_er * Q_er_nu0 - 1 / gamma_el * Q_el_nu0))$
u[4]: 2 * (%i * rho / 2 * (1 / gamma_ir * Q_ir_nu0 + 1 / gamma_il * Q_il_nu0) - %i / 2 * (1 / gamma_er * Q_er_nu0 + 1 / gamma_el * Q_el_nu0))$

for i:1 thru 4 do
  for j:1 thru 4 do
    c[i, j]: coeff(expand(rhs(eq[i])), (psi[j]))$

apply(stringout, append([sconcat(repo, "all_rawc_achiral_chiral")], flatten(makelist(makelist(c[i, j], j, 4), i, 4))))$

for i:1 thru 4 do
  for j:1 thru 4 do
    e[i, j]: coeff(c[i, j], T_g_ir) + coeff(c[i, j], T_g_il) + coeff(c[i, j], T_e) = 0$

sl: flatten(solve(flatten(makelist(makelist(e[i, j], j, 4), i, 4)), 
      flatten(makelist(makelist(z[i, j], j, 4), i, 4))))$

ss: factor(subst([%r7=2*gamma_il, %r8=0, %r3=1, %r4=0, %r12=0, %r11=2*gamma_ir, %r10=0, %r9=1, %r6=1, %r5=0, %r2=0, %r1=1], sl))$

for i:1 thru 4 do
  for j:1 thru 4 do
    c[i, j]: subst(ss, c[i, j])$

/* output for further processing */
stringout(sconcat(repo, "all_q_achiral_chiral"), subst(ss, Q_er), subst(ss, Q_el))$ 

apply(stringout, append([sconcat(repo, "all_c_achiral_chiral")], flatten(makelist(makelist(c[i, j], j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_e_achiral_chiral")], flatten(makelist(makelist(get_e(c[i, j]), j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_a_achiral_chiral")], flatten(makelist(makelist(get_a(c[i, j]), j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_eq_achiral_chiral")], flatten(makelist(makelist(e[i, j], j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_u_achiral_chiral")], makelist(u[i], i, 4)))$

apply(stringout, append([sconcat(repo, "all_bv_achiral_chiral")], makelist(eq[i], i, 4)))$

det: determinant(subst([I=1], 
     apply(matrix, makelist(makelist(get_e(c[i, j]), j, 4), i, 4))))$

stringout(sconcat(repo, "all_det_achiral_chiral"), factor(det))$

/* chiral-achiral */

Q_il: K_i_i * (z[1,1] * psi[1] + z[1,2] * psi[2]) + S_i_i * (z[1,3] * psi[3] + z[1,4] * psi[4])$
Q_ir: K_i_i * (z[2,1] * psi[1] + z[2,2] * psi[2]) + S_i_i * (z[2,3] * psi[3] + z[2,4] * psi[4])$
Q_el: K_g_el_e * (z[3,1] * psi[1] + z[3,2] * psi[2]) + S_g_el_e * (z[3,3] * psi[3] + z[3,4] * psi[4])$
Q_er: K_g_er_e * (z[4,1] * psi[1] + z[4,2] * psi[2]) + S_g_er_e * (z[4,3] * psi[3] + z[4,4] * psi[4])$

beta_i: 0$
gamma_il: k_i$
gamma_ir: k_i$

Q_il_nu: subst([S_i_i=Ks_i + I, K_i_i=T_i], Q_il)$
Q_ir_nu: subst([S_i_i=Ks_i + I, K_i_i=T_i], Q_ir)$
Q_el_nu: subst([S_g_el_e=Ks_g_el - I, K_g_el_e=T_g_el], Q_el)$
Q_er_nu: subst([S_g_er_e=Ks_g_er - I, K_g_er_e=T_g_er], Q_er)$
Q_il_n: subst([K_i_i=K_i - I, S_i_i=S_i], Q_il)$
Q_ir_n: subst([K_i_i=K_i - I, S_i_i=S_i], Q_ir)$
Q_el_n: subst([K_g_el_e=K_g_el + I, S_g_el_e=S_g_el], Q_el)$
Q_er_n: subst([K_g_er_e=K_g_er + I, S_g_er_e=S_g_er], Q_er)$

/* v = \nu\times E_in, v1 = v[3], v0 = v[1:2] 
   w = \nu\times H_in, w1 = w[3], w0 = w[1:2] */

/*
E3_i_nu: 1/2 * (Q_ir_nu + Q_il_nu)$ 
E3_e_nu: 1/2 * (Q_er_nu + Q_el_nu)$
H3_i_nu: %i / 2 * (Q_ir_nu - Q_il_nu)$
H3_e_nu: %i / 2 * (Q_er_nu - Q_el_nu)$
E3_i_n: 1/2 * (Q_ir_n + Q_il_n)$ 
E3_e_n: 1/2 * (Q_er_n + Q_el_n)$
H3_i_n: %i / 2 * (Q_ir_n - Q_il_n)$
H3_e_n: %i / 2 * (Q_er_n - Q_el_n)$

eq[1]: v0 = delta * E3_i_n - E3_e_n$
eq[2]: w0 = rho * H3_i_n - H3_e_n$
eq[3]: v1 = delta * (beta_i * E3_i_nu - %i / k_i * H3_i_nu) - (beta_e * E3_e_nu - %i / k_e * H3_e_nu)$ 
eq[4]: w1 = rho * (beta_i * H3_i_nu + %i / k_i * E3_i_nu) - (beta_e * H3_e_nu + %i / k_e * E3_e_nu)$ 
*/

eq[1]: v0 = delta / 2 * (Q_ir_n + Q_il_n) - 1 / 2 * (Q_er_n + Q_el_n)$
eq[2]: w0 = %i * rho / 2 * (Q_ir_n - Q_il_n) - %i / 2 * (Q_er_n - Q_el_n)$ 
eq[3]: v1 = delta / 2 * (1 / gamma_ir * Q_ir_nu - 1 / gamma_il * Q_il_nu) - 1 / 2 * (1 / gamma_er * Q_er_nu - 1 / gamma_el * Q_el_nu)$
eq[4]: w1 = %i * rho / 2 * (1 / gamma_ir * Q_ir_nu + 1 / gamma_il * Q_il_nu) - %i / 2 * (1 / gamma_er * Q_er_nu + 1 / gamma_el * Q_el_nu)$

Q_ir_n0: c_ir * J0_i$
Q_il_n0: c_il * J0_i$
Q_er_n0: c_er * H0_er$
Q_el_n0: c_el * H0_el$
Q_ir_nu0: -c_ir * k_i * J1_i * d_nu$
Q_il_nu0: -c_il * k_i * J1_i * d_nu$
Q_er_nu0: -c_er * gamma_er * H1_er * d_nu$
Q_el_nu0: -c_el * gamma_el * H1_el * d_nu$

/*
E3_i_nu0: 1/2 * (Q_ir_nu0 + Q_il_nu0)$ 
E3_e_nu0: 1/2 * (Q_er_nu0 + Q_el_nu0)$
H3_i_nu0: %i / 2 * (Q_ir_nu0 - Q_il_nu0)$
H3_e_nu0: %i / 2 * (Q_er_nu0 - Q_el_nu0)$
E3_i_n0: 1/2 * (Q_ir_n0 + Q_il_n0)$ 
E3_e_n0: 1/2 * (Q_er_n0 + Q_el_n0)$
H3_i_n0: %i / 2 * (Q_ir_n0 - Q_il_n0)$
H3_e_n0: %i / 2 * (Q_er_n0 - Q_el_n0)$

u[1]: 2*(delta * E3_i_n0 - E3_e_n0)$
u[2]: 2*(rho * H3_i_n0 - H3_e_n0)$
u[3]: 2*(delta * (beta_i * E3_i_nu0 - %i / k_i * H3_i_nu0) - (beta_e * E3_e_nu0 - %i / k_e * H3_e_nu0))$ 
u[4]: 2*(rho * (beta_i * H3_i_nu0 + %i / k_i * E3_i_nu0) - (beta_e * H3_e_nu0 + %i / k_e * E3_e_nu0))$ 
*/

u[1]: 2 * (delta / 2 * (Q_ir_n0 + Q_il_n0) - 1 / 2 * (Q_er_n0 + Q_el_n0))$
u[2]: 2 * (%i * rho / 2 * (Q_ir_n0 - Q_il_n0) - %i / 2 * (Q_er_n0 - Q_el_n0))$ 
u[3]: 2 * (delta / 2 * (1 / gamma_ir * Q_ir_nu0 - 1 / gamma_il * Q_il_nu0) - 1 / 2 * (1 / gamma_er * Q_er_nu0 - 1 / gamma_el * Q_el_nu0))$
u[4]: 2 * (%i * rho / 2 * (1 / gamma_ir * Q_ir_nu0 + 1 / gamma_il * Q_il_nu0) - %i / 2 * (1 / gamma_er * Q_er_nu0 + 1 / gamma_el * Q_el_nu0))$

for i:1 thru 4 do
  for j:1 thru 4 do
    c[i, j]: coeff(expand(rhs(eq[i])), (psi[j]))$

apply(stringout, append([sconcat(repo, "all_rawc_chiral_achiral")], flatten(makelist(makelist(c[i, j], j, 4), i, 4))))$

for i:1 thru 4 do
  for j:1 thru 4 do
    e[i, j]: coeff(c[i, j], T_i) + coeff(c[i, j], T_g_el) + coeff(c[i, j], T_g_er) = 0$

sl: flatten(solve(flatten(makelist(makelist(e[i, j], j, 4), i, 4)), 
      flatten(makelist(makelist(z[i, j], j, 4), i, 4))))$

ss: factor(subst([%r7=2*k_i, %r8=0, %r3=1, %r4=0, %r12=0, %r11=2*k_i, %r10=0, %r9=1, %r6=1, %r5=0, %r2=0, %r1=1], sl))$

for i:1 thru 4 do
  for j:1 thru 4 do
    c[i, j]: subst(ss, c[i, j])$

/* output for further processing */
stringout(sconcat(repo, "all_q_chiral_achiral"), subst(ss, Q_er), subst(ss, Q_el))$ 

apply(stringout, append([sconcat(repo, "all_c_chiral_achiral")], flatten(makelist(makelist(c[i, j], j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_e_chiral_achiral")], flatten(makelist(makelist(get_e(c[i, j]), j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_a_chiral_achiral")], flatten(makelist(makelist(get_a(c[i, j]), j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_eq_chiral_achiral")], flatten(makelist(makelist(e[i, j], j, 4), i, 4))))$

apply(stringout, append([sconcat(repo, "all_u_chiral_achiral")], makelist(u[i], i, 4)))$

apply(stringout, append([sconcat(repo, "all_bv_chiral_achiral")], makelist(eq[i], i, 4)))$

det: determinant(subst([I=1], 
     apply(matrix, makelist(makelist(get_e(c[i, j]), j, 4), i, 4))))$

stringout(sconcat(repo, "all_det_chiral_achiral"), factor(det))$

/* chiral-perfect conductor */

Q_il: 0$
Q_ir: 0$
Q_el: K_g_el_e * z[1,1] * psi[1] + S_g_el_e * z[1,2] * psi[2]$
Q_er: K_g_er_e * z[2,1] * psi[1] + S_g_er_e * z[2,2] * psi[2]$

Q_il_nu: subst([S_g_il_i=Ks_g_il + I, K_g_il_i=T_g_il], Q_il)$
Q_ir_nu: subst([S_g_ir_i=Ks_g_ir + I, K_g_ir_i=T_g_ir], Q_ir)$
Q_el_nu: subst([S_g_el_e=Ks_g_el - I, K_g_el_e=T_g_el], Q_el)$
Q_er_nu: subst([S_g_er_e=Ks_g_er - I, K_g_er_e=T_g_er], Q_er)$
Q_il_n: subst([K_g_il_i=K_g_il - I, S_g_il_i=S_g_il], Q_il)$
Q_ir_n: subst([K_g_ir_i=K_g_ir - I, S_g_ir_i=S_g_ir], Q_ir)$
Q_el_n: subst([K_g_el_e=K_g_el + I, S_g_el_e=S_g_el], Q_el)$
Q_er_n: subst([K_g_er_e=K_g_er + I, S_g_er_e=S_g_er], Q_er)$

/* v = \nu\times E_in, v1 = v[3], v0 = v[1:2] 
   w = \nu\times H_in, w1 = w[3], w0 = w[1:2] */

/*
E3_i_nu: 1/2 * (Q_ir_nu + Q_il_nu)$ 
E3_e_nu: 1/2 * (Q_er_nu + Q_el_nu)$
H3_i_nu: %i / 2 * (Q_ir_nu - Q_il_nu)$
H3_e_nu: %i / 2 * (Q_er_nu - Q_el_nu)$
E3_i_n: 1/2 * (Q_ir_n + Q_il_n)$ 
E3_e_n: 1/2 * (Q_er_n + Q_el_n)$
H3_i_n: %i / 2 * (Q_ir_n - Q_il_n)$
H3_e_n: %i / 2 * (Q_er_n - Q_el_n)$

eq[1]: v0 = delta * E3_i_n - E3_e_n$
eq[2]: w0 = rho * H3_i_n - H3_e_n$
eq[3]: v1 = delta * (beta_i * E3_i_nu - %i / k_i * H3_i_nu) - (beta_e * E3_e_nu - %i / k_e * H3_e_nu)$ 
eq[4]: w1 = rho * (beta_i * H3_i_nu + %i / k_i * E3_i_nu) - (beta_e * H3_e_nu + %i / k_e * E3_e_nu)$ 
*/

/*
eq[1]: v0 = delta / 2 * (Q_ir_n + Q_il_n) - 1 / 2 * (Q_er_n + Q_el_n)$
eq[2]: w0 = %i * rho / 2 * (Q_ir_n - Q_il_n) - %i / 2 * (Q_er_n - Q_el_n)$ 
eq[3]: v1 = delta / 2 * (1 / gamma_ir * Q_ir_nu - 1 / gamma_il * Q_il_nu) - 1 / 2 * (1 / gamma_er * Q_er_nu - 1 / gamma_el * Q_el_nu)$
eq[4]: w1 = %i * rho / 2 * (1 / gamma_ir * Q_ir_nu + 1 / gamma_il * Q_il_nu) - %i / 2 * (1 / gamma_er * Q_er_nu + 1 / gamma_el * Q_el_nu)$
*/

eq[1]: w0 = %i * rho / 2 * (Q_ir_n - Q_il_n) - %i / 2 * (Q_er_n - Q_el_n)$ 
eq[2]: w1 = %i * rho / 2 * (1 / gamma_ir * Q_ir_nu + 1 / gamma_il * Q_il_nu) - %i / 2 * (1 / gamma_er * Q_er_nu + 1 / gamma_el * Q_el_nu)$

/* quick and dirty way to generate u for computations */

Q_ir_n0: 0$
Q_il_n0: 0$
Q_er_n0: c_er * H0_er$
Q_el_n0: c_el * H0_el$
Q_ir_nu0: 0$
Q_il_nu0: 0$
Q_er_nu0: -c_er * gamma_er * H1_er * d_nu$
Q_el_nu0: -c_el * gamma_el * H1_el * d_nu$

/*
E3_i_nu0: 1/2 * (Q_ir_nu0 + Q_il_nu0)$ 
E3_e_nu0: 1/2 * (Q_er_nu0 + Q_el_nu0)$
H3_i_nu0: %i / 2 * (Q_ir_nu0 - Q_il_nu0)$
H3_e_nu0: %i / 2 * (Q_er_nu0 - Q_el_nu0)$
E3_i_n0: 1/2 * (Q_ir_n0 + Q_il_n0)$ 
E3_e_n0: 1/2 * (Q_er_n0 + Q_el_n0)$
H3_i_n0: %i / 2 * (Q_ir_n0 - Q_il_n0)$
H3_e_n0: %i / 2 * (Q_er_n0 - Q_el_n0)$

u[1]: 2*(delta * E3_i_n0 - E3_e_n0)$
u[2]: 2*(rho * H3_i_n0 - H3_e_n0)$
u[3]: 2*(delta * (beta_i * E3_i_nu0 - %i / k_i * H3_i_nu0) - (beta_e * E3_e_nu0 - %i / k_e * H3_e_nu0))$ 
u[4]: 2*(rho * (beta_i * H3_i_nu0 + %i / k_i * E3_i_nu0) - (beta_e * H3_e_nu0 + %i / k_e * E3_e_nu0))$ 
*/

/*
u[1]: 2 * (delta / 2 * (Q_ir_n0 + Q_il_n0) - 1 / 2 * (Q_er_n0 + Q_el_n0))$
u[2]: 2 * (%i * rho / 2 * (Q_ir_n0 - Q_il_n0) - %i / 2 * (Q_er_n0 - Q_el_n0))$ 
u[3]: 2 * (delta / 2 * (1 / gamma_ir * Q_ir_nu0 - 1 / gamma_il * Q_il_nu0) - 1 / 2 * (1 / gamma_er * Q_er_nu0 - 1 / gamma_el * Q_el_nu0))$
u[4]: 2 * (%i * rho / 2 * (1 / gamma_ir * Q_ir_nu0 + 1 / gamma_il * Q_il_nu0) - %i / 2 * (1 / gamma_er * Q_er_nu0 + 1 / gamma_el * Q_el_nu0))$
*/

u[1]: 2 * (%i * rho / 2 * (Q_ir_n0 - Q_il_n0) - %i / 2 * (Q_er_n0 - Q_el_n0))$ 
u[2]: 2 * (%i * rho / 2 * (1 / gamma_ir * Q_ir_nu0 + 1 / gamma_il * Q_il_nu0) - %i / 2 * (1 / gamma_er * Q_er_nu0 + 1 / gamma_el * Q_el_nu0))$

for i:1 thru 2 do
  for j:1 thru 2 do
    c[i, j]: coeff(expand(rhs(eq[i])), (psi[j]))$

apply(stringout, append([sconcat(repo, "all_rawc_chiral_conductor")], flatten(makelist(makelist(c[i, j], j, 2), i, 2))))$

for i:1 thru 2 do
  for j:1 thru 2 do
    e[i, j]: coeff(c[i, j], T_g_er) + coeff(c[i, j], T_g_el) = 0$

sl: flatten(solve(flatten(makelist(makelist(e[i, j], j, 2), i, 2)), 
      flatten(makelist(makelist(z[i, j], j, 2), i, 2))))$

ss: factor(subst([%r3=1, %r2=-2*gamma_er, %r1=1], sl))$

for i:1 thru 2 do
  for j:1 thru 2 do
    c[i, j]: subst(ss, c[i, j])$

/* output for further processing */
stringout(sconcat(repo, "all_q_chiral_conductor"), subst(ss, Q_er), subst(ss, Q_el))$ 

apply(stringout, append([sconcat(repo, "all_c_chiral_conductor")], flatten(makelist(makelist(c[i, j], j, 2), i, 2))))$

apply(stringout, append([sconcat(repo, "all_e_chiral_conductor")], flatten(makelist(makelist(get_e(c[i, j]), j, 2), i, 2))))$

apply(stringout, append([sconcat(repo, "all_a_chiral_conductor")], flatten(makelist(makelist(get_a(c[i, j]), j, 2), i, 2))))$

apply(stringout, append([sconcat(repo, "all_eq_chiral_conductor")], flatten(makelist(makelist(e[i, j], j, 2), i, 2))))$

apply(stringout, append([sconcat(repo, "all_u_chiral_conductor")], makelist(u[i], i, 2)))$

apply(stringout, append([sconcat(repo, "all_bv_chiral_conductor")], makelist(eq[i], i, 2)))$

det: determinant(subst([I=1], 
     apply(matrix, makelist(makelist(get_e(c[i, j]), j, 2), i, 2))))$

stringout(sconcat(repo, "all_det_chiral_conductor"), factor(det))$
